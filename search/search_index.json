{
    "docs": [
        {
            "location": "/",
            "text": "d-python-helium\n\n\nLike \nd-python-files\n, \nbut for serving static sites instead of files.\n\n\nStatic files only.\n\n\nPort and bind address should both be configurable.\n\n\nHelium Application\n\n\nThe helium appcliation is a twisted network application \nthat serves different folders of static content on different\nports.\n\n\nSee \nHelium.md\n.\n\n\nDockerfile and Base Image\n\n\nThe core idea behind python helium is to be as lightweight as possible,\nso this uses \njfloff/alpine-python:recent\n \n(see \njflof/alpine-python\n).\n\n\nSee \nDocker.md\n\n\nStatic Content Layout\n\n\nPython Helium expects static content to live in \n/www\n \ninside the container. The document below\ndetails how to bind-mount each subdomain's \nstatic content/one-pager into the container\nfor the \nhelium.py\n application.\n\n\nSee \nLayout.md\n\n\nNote on Future Development\n\n\nAt this point, this repo was abandoned\nin favor of \nd-nginx-subdomains\n,\nbut it is a useful tool that we'll keep around\nfor a future application.",
            "title": "Home"
        },
        {
            "location": "/#d-python-helium",
            "text": "Like  d-python-files , \nbut for serving static sites instead of files.  Static files only.  Port and bind address should both be configurable.",
            "title": "d-python-helium"
        },
        {
            "location": "/#helium-application",
            "text": "The helium appcliation is a twisted network application \nthat serves different folders of static content on different\nports.  See  Helium.md .",
            "title": "Helium Application"
        },
        {
            "location": "/#dockerfile-and-base-image",
            "text": "The core idea behind python helium is to be as lightweight as possible,\nso this uses  jfloff/alpine-python:recent  \n(see  jflof/alpine-python ).  See  Docker.md",
            "title": "Dockerfile and Base Image"
        },
        {
            "location": "/#static-content-layout",
            "text": "Python Helium expects static content to live in  /www  \ninside the container. The document below\ndetails how to bind-mount each subdomain's \nstatic content/one-pager into the container\nfor the  helium.py  application.  See  Layout.md",
            "title": "Static Content Layout"
        },
        {
            "location": "/#note-on-future-development",
            "text": "At this point, this repo was abandoned\nin favor of  d-nginx-subdomains ,\nbut it is a useful tool that we'll keep around\nfor a future application.",
            "title": "Note on Future Development"
        },
        {
            "location": "/Docker/",
            "text": "Dockerfile and Base Image\n\n\nThe core idea behind python helium is to be as lightweight as possible,\nso this is based on the lightweight \njfloff/alpine-python\n image.\n\n\nDocker and Docker Compose\n\n\nThe Dockerfile extends \njfloff/alpine-python:recent-slim\n \nand installs twisted into the container on first run.\n\n\nThis can be used standalone by building using \ndocker build\n.\n\n\nHowever, the preferred way to use this image is to use the \ndocker-compose file:\n\n\ndocker-compose build\ndocker-compose up -d\ndocker-compose down\n\n\n\n\nNetwork\n\n\nThis requires the container to listen for requests \non multiple ports. The container should be bound \nto the correct address.\n\n\nIf Python Helium is listening for requests from an nginx \ncontainer in the same pod, you can listen for any incoming\nrequest (no need to bind to a particular address).\nIn this case the container will not have any external\ninterface.\n\n\nIf Python Helium is listening for requests over a VPN, \nthe service should be bound to the VPN IP address of\nthe machine. This will ensure that the server only\nresponds to (encrypted) requests from machines on the VPN.\n\n\nVolumes and Bind Mounting\n\n\nThe Dockerfile expects the application to be at:\n\n\n/app/helium.py\n\n\n\n\nso bind mount the \nhelium.py\n application to \n/app/helium.py\n\nwhen you run this container.",
            "title": "Docker"
        },
        {
            "location": "/Docker/#dockerfile-and-base-image",
            "text": "The core idea behind python helium is to be as lightweight as possible,\nso this is based on the lightweight  jfloff/alpine-python  image.",
            "title": "Dockerfile and Base Image"
        },
        {
            "location": "/Docker/#docker-and-docker-compose",
            "text": "The Dockerfile extends  jfloff/alpine-python:recent-slim  \nand installs twisted into the container on first run.  This can be used standalone by building using  docker build .  However, the preferred way to use this image is to use the \ndocker-compose file:  docker-compose build\ndocker-compose up -d\ndocker-compose down",
            "title": "Docker and Docker Compose"
        },
        {
            "location": "/Docker/#network",
            "text": "This requires the container to listen for requests \non multiple ports. The container should be bound \nto the correct address.  If Python Helium is listening for requests from an nginx \ncontainer in the same pod, you can listen for any incoming\nrequest (no need to bind to a particular address).\nIn this case the container will not have any external\ninterface.  If Python Helium is listening for requests over a VPN, \nthe service should be bound to the VPN IP address of\nthe machine. This will ensure that the server only\nresponds to (encrypted) requests from machines on the VPN.",
            "title": "Network"
        },
        {
            "location": "/Docker/#volumes-and-bind-mounting",
            "text": "The Dockerfile expects the application to be at:  /app/helium.py  so bind mount the  helium.py  application to  /app/helium.py \nwhen you run this container.",
            "title": "Volumes and Bind Mounting"
        },
        {
            "location": "/Helium/",
            "text": "Helium Application\n\n\nThe helium appcliation is a twisted network application \nthat serves different folders of static content on different\nports.\n\n\nA straightforward example of what we are doing is \navailable in the \npython-multiport\n\nrepository at \nstatic_content.py\n.\n\n\nThe gist of the program is this:\n\n\n\n\nFor each static site:\n\n\nCreate a \ntwisted.File\n resource that points to the static directory\n\n\nCreate a \ntwisted.Site\n factory that creates an http listener on a port\n\n\nGlue the http listener to a unique TCP port on the host machine\n\n\nRun the \ntwisted.Site.listen()\n method to add the listener to the twisted application\n\n\n\n\n\n\nRun the twisted application\n\n\n\n\nIt can be run like any python program,\n\n\npython helium.py",
            "title": "Helium"
        },
        {
            "location": "/Helium/#helium-application",
            "text": "The helium appcliation is a twisted network application \nthat serves different folders of static content on different\nports.  A straightforward example of what we are doing is \navailable in the  python-multiport \nrepository at  static_content.py .  The gist of the program is this:   For each static site:  Create a  twisted.File  resource that points to the static directory  Create a  twisted.Site  factory that creates an http listener on a port  Glue the http listener to a unique TCP port on the host machine  Run the  twisted.Site.listen()  method to add the listener to the twisted application    Run the twisted application   It can be run like any python program,  python helium.py",
            "title": "Helium Application"
        },
        {
            "location": "/Layout/",
            "text": "Static Content Layout: Inside Container\n\n\nInsie of the container, Python Helium expects\nstatic content to be present in \n/www\n.\n\n\nEach site should follow the schema of:\n\n\n/www/<subdomain-url>/htdocs\n\n\n\n\nwhere \nhtdocs\n is a cloned copy of the \ngh-pages\n \nbranch of the repository for that subdomain's \none pager.\n\n\nFor example, the bots subdomain bots.charlesreid1.com\nhas the layout:\n\n\n/www\n    bots.charlesreid1.com/\n        htdocs/\n            index.html\n            css/\n            js/\n            ...\n    pages.charlesreid1.com\n    hooks.charlesreid1.com\n    api.charlesreid1.com\n\n\n\n\nand htdocs is the repo at\n\nhttps://git.charlesreid1.com/charlesreid1/bots.charlesreid1.com\n.",
            "title": "Layout"
        },
        {
            "location": "/Layout/#static-content-layout-inside-container",
            "text": "Insie of the container, Python Helium expects\nstatic content to be present in  /www .  Each site should follow the schema of:  /www/<subdomain-url>/htdocs  where  htdocs  is a cloned copy of the  gh-pages  \nbranch of the repository for that subdomain's \none pager.  For example, the bots subdomain bots.charlesreid1.com\nhas the layout:  /www\n    bots.charlesreid1.com/\n        htdocs/\n            index.html\n            css/\n            js/\n            ...\n    pages.charlesreid1.com\n    hooks.charlesreid1.com\n    api.charlesreid1.com  and htdocs is the repo at https://git.charlesreid1.com/charlesreid1/bots.charlesreid1.com .",
            "title": "Static Content Layout: Inside Container"
        }
    ]
}